{"version":3,"sources":["components/BasicInfo.js","components/RadioChecklist.js","components/RiskTolerance1.js","components/RiskTolerance2.js","components/MasterForm.js","components/Error.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Step1","Component","this","props","currentStep","className","htmlFor","name","placeholder","id","value","onChange","handleChange","type","email","Contact","Step3","MasterForm","event","target","setState","handleSubmit","preventDefault","state","username","password","alert","_next","_prev","bind","onClick","Fragment","onSubmit","previousButton","nextButton","Error","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"gQAsCeA,GChCIC,Y,iLDAf,OAA+B,IAA3BC,KAAKC,MAAMC,YAEN,KAKP,yBAAKC,UAAU,cACb,2BAAOC,QAAQ,QAAf,aACA,2BACEC,KAAK,OACLC,YAAY,kBACZC,GAAG,OACHC,MAAOR,KAAKC,MAAMI,KAClBI,SAAUT,KAAKC,MAAMS,eAGvB,2BAAON,QAAQ,SAAf,iBACA,2BACED,UAAU,eACVI,GAAG,QACHF,KAAK,QACLM,KAAK,OACLL,YAAY,cACZE,MAAOR,KAAKC,MAAMW,MAClBH,SAAUT,KAAKC,MAAMS,oB,GA3BXX,cEMLc,EARC,WACZ,OACI,6BACI,6CCKGC,EARD,WACV,OACI,6BACI,6CC6GGC,E,YAzGb,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KAMRS,aAAe,SAAAM,GAAU,IAAD,EACAA,EAAMC,OAArBZ,EADe,EACfA,KAAMG,EADS,EACTA,MACb,EAAKU,SAAL,eACGb,EAAOG,KAVO,EAenBW,aAAe,SAAAH,GACbA,EAAMI,iBADgB,MAEgB,EAAKC,MAAnCT,EAFc,EAEdA,MAAOU,EAFO,EAEPA,SAAUC,EAFH,EAEGA,SACzBC,MAAM,oDAAD,OACWZ,EADX,sCAEcU,EAFd,qCAGcC,KArBF,EAwBnBE,MAAQ,WACN,IAAIvB,EAAc,EAAKmB,MAAMnB,YAE7BA,EAAcA,GAAe,EAAI,EAAIA,EAAc,EACnD,EAAKgB,SAAS,CACZhB,YAAaA,KA7BE,EAiCnBwB,MAAQ,WACN,IAAIxB,EAAc,EAAKmB,MAAMnB,YAE7BA,EAAcA,GAAe,EAAI,EAAIA,EAAc,EACnD,EAAKgB,SAAS,CACZhB,YAAaA,KAnCf,EAAKuB,MAAQ,EAAKA,MAAME,KAAX,gBACb,EAAKD,MAAQ,EAAKA,MAAMC,KAAX,gBAJI,E,8EA8CjB,OAAoB,IADF3B,KAAKqB,MAAMnB,YAGzB,4BACEC,UAAU,oBACVQ,KAAK,SACLiB,QAAS5B,KAAK0B,OAHhB,YASG,O,mCAIP,OADkB1B,KAAKqB,MAAMnB,YACX,EAEd,4BACEC,UAAU,8BACVQ,KAAK,SACLiB,QAAS5B,KAAKyB,OAHhB,QASG,O,+BAGP,OACE,kBAAC,IAAMI,SAAP,KACE,mDAEA,uCAAa7B,KAAKqB,MAAMnB,YAAxB,KAEA,0BAAM4B,SAAU9B,KAAKmB,cACnB,kBAAC,EAAD,CACEjB,YAAaF,KAAKqB,MAAMnB,YACxBQ,aAAcV,KAAKU,aACnBE,MAAOZ,KAAKqB,MAAMT,QAEpB,kBAAC,EAAD,CACEV,YAAaF,KAAKqB,MAAMnB,YACxBQ,aAAcV,KAAKU,aACnBY,SAAUtB,KAAKqB,MAAMC,WAEvB,kBAAC,EAAD,CACEpB,YAAaF,KAAKqB,MAAMnB,YACxBQ,aAAcV,KAAKU,aACnBa,SAAUvB,KAAKqB,MAAME,WAEtBvB,KAAK+B,iBACL/B,KAAKgC,mB,GAnGSjC,aCEVkC,EARD,WACV,OACI,6BACI,+CCeGC,E,iLAXX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAO,IAAIC,UAAWrB,EAAYsB,OAAK,IAC9C,kBAAC,IAAD,CAAOD,UAAWH,U,GANVlC,aCKEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.9687b728.chunk.js","sourcesContent":["import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Component } from \"react\";\n\nclass Step1 extends Component {\n  render() {\n    if (this.props.currentStep !== 1) {\n      // Prop: The current step\n      return null;\n    }\n\n    // The markup for the Step 1 UI\n    return (\n      <div className=\"form-group\">\n        <label htmlFor=\"Name\">Last Name</label>\n        <input\n          name=\"Name\"\n          placeholder=\"Enter Your Name\"\n          id=\"name\"\n          value={this.props.name} \n          onChange={this.props.handleChange}\n        />\n\n        <label htmlFor=\"email\">Email address</label>\n        <input\n          className=\"form-control\"\n          id=\"email\"\n          name=\"email\"\n          type=\"text\"\n          placeholder=\"Enter email\"\n          value={this.props.email} // Prop: The email input data\n          onChange={this.props.handleChange} // Prop: Puts data into state\n        />\n      </div>\n    );\n  }\n}\n\nexport default Step1;\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\n// import 'antd/dist/antd.css';\nimport { Radio, Input } from 'antd';\n\n\nclass Form extends Component {\n        state = {\n          value: 1,\n        };\n      \n        onChange = e => {\n          console.log('radio checked', e.target.value);\n          this.setState({\n            value: e.target.value,\n          });\n        };\n      \n        render() {\n          return (\n            \n            <Radio.Group onChange={this.onChange} value={this.state.value}>\n              <Radio value={1}>A</Radio>\n              <Radio value={2}>B</Radio>\n              <Radio value={3}>C</Radio>\n              <Radio value={4}>D</Radio>\n            </Radio.Group>\n          );\n        }\n      }\n\nexport default Form\n\n","import React from \"react\"\n\nconst Contact = () => {\n    return (\n        <div>\n            <p>Contact Page</p>\n        </div>\n    )\n}\n\nexport default Contact\n","import React from \"react\"\n\nconst Step3 = () => {\n    return (\n        <div>\n            <p>Contact Page</p>\n        </div>\n    )\n}\n\nexport default Step3","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Component } from \"react\";\nimport Radiochecklist from \"./RadioChecklist\"; // importing child component\nimport Step1 from \"./BasicInfo\";\nimport Step2 from \"./RiskTolerance1\";\nimport Step3 from \"./RiskTolerance2\";\n\nclass MasterForm extends Component {\n  constructor(props) {\n    super(props);\n    // Set the initial input values\n    this._next = this._next.bind(this);\n    this._prev = this._prev.bind(this);\n  }\n\n  handleChange = event => {\n    const {name, value} = event.target\n    this.setState({\n      [name]: value\n    })    \n  }\n   \n\n  handleSubmit = event => {\n    event.preventDefault();\n    const { email, username, password } = this.state;\n    alert(`Your registration detail: \\n \n           Email: ${email} \\n \n           Username: ${username} \\n\n           Password: ${password}`);\n  };\n\n  _next = () => {\n    let currentStep = this.state.currentStep;\n    // If the current step is 1 or 2, then add one on \"next\" button click\n    currentStep = currentStep >= 2 ? 3 : currentStep + 1;\n    this.setState({\n      currentStep: currentStep\n    });\n  };\n\n  _prev = () => {\n    let currentStep = this.state.currentStep;\n    // If the current step is 2 or 3, then subtract one on \"previous\" button click\n    currentStep = currentStep <= 1 ? 1 : currentStep - 1;\n    this.setState({\n      currentStep: currentStep\n    });\n  };\n\n  //button functions\n\n  previousButton() {\n    let currentStep = this.state.currentStep;\n    if (currentStep !== 1) {\n      return (\n        <button\n          className=\"btn btn-secondary\"\n          type=\"button\"\n          onClick={this._prev}\n        >\n          Previous\n        </button>\n      );\n    }\n    return null;\n  }\n  nextButton() {\n    let currentStep = this.state.currentStep;\n    if (currentStep < 3) {\n      return (\n        <button\n          className=\"btn btn-primary float-right\"\n          type=\"button\"\n          onClick={this._next}\n        >\n          Next\n        </button>\n      );\n    }\n    return null;\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <h1>Portfolio Optimiser</h1>\n\n        <label>Step {this.state.currentStep} </label>\n\n        <form onSubmit={this.handleSubmit}>\n          <Step1\n            currentStep={this.state.currentStep}\n            handleChange={this.handleChange}\n            email={this.state.email}\n          />\n          <Step2\n            currentStep={this.state.currentStep}\n            handleChange={this.handleChange}\n            username={this.state.username}\n          />\n          <Step3\n            currentStep={this.state.currentStep}\n            handleChange={this.handleChange}\n            password={this.state.password}\n          />\n          {this.previousButton()}\n          {this.nextButton()}\n        </form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default MasterForm;\n","import React from \"react\"\n\nconst Error = () => {\n    return (\n        <div>\n            <p>WRONGGG PAGEEE</p>\n        </div>\n    )\n}\n\nexport default Error\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\"\nimport MasterForm from './components/MasterForm'\nimport Error from './components/Error'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path = \"/\" component={MasterForm} exact/>\n          <Route component={Error}/>\n        </Switch>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}